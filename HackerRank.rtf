{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red49\green49\blue49;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c25098\c25098\c25098;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww5360\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 n, k = map(int, input().strip().split(' '))\
a = list(map(int, input().strip().split(' ')))\
answer = array_left_rotation(a, n, k);\
print(*answer, sep=' ')\
\
\
if __name__ == "__main__":\
    n, k = input().strip().split(' ')\
    n, k = [str(n), int(k)]\
    result = digitSum(n, k)\
    print(result)\
\
if __name__ == '__main__':\
    fptr = open(os.environ['OUTPUT_PATH'], 'w')\
\
    n = int(input())\
\
    for n_itr in range(n):\
        pxPyQxQy = input().split()\
\
        px = int(pxPyQxQy[0])\
\
        py = int(pxPyQxQy[1])\
\
        qx = int(pxPyQxQy[2])\
\
        qy = int(pxPyQxQy[3])\
\
        result = findPoint(px, py, qx, qy)\
\
        fptr.write(' '.join(map(str, result)))\
        fptr.write('\\n')\
\
    fptr.close()\
\
\
def mean_median_mode(n, X):\
    mean = doSomething(n, X)\
    median = doSomething(n, X)\
    mode = doSomething(X)\
    return mean, median, mode\
    \
\
    \
if __name__ == "__main__":\
    n = input().strip().split(' ')\
    X = input().strip().split(' ')\
    mean, median, mode = mean_median_mode(n, X)\
    print(mean, '\\n', median, '\\n', mode)\
\
\
\pard\pardeftab720\sl340\partightenfactor0

\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 def ret_miss(A, B):\
\'a0\'a0\'a0\'a0k = len(A)\
\'a0\'a0\'a0\'a0if k == 2:\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if A[1] == B[0]:\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return A[0]\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0elif A[0] == B[0]:\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return A[1]\
\'a0\'a0\'a0\'a0n = k/2\
\'a0\'a0\'a0\'a0print A[n], B[n]\
\'a0\'a0\'a0\'a0if A[n] == B[n]:\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0A= A[n:]\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0B=B[n:]\
\'a0\'a0\'a0\'a0else:\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0A=A[:n+1]\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0B=B[:n+1]\
\'a0\'a0\'a0\'a0print A,B\
\'a0\'a0\'a0\'a0return ret_miss(A,B)
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\sl340\partightenfactor0

\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 x = set(listA)-set(listB)\
print(x)
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\sl340\partightenfactor0

\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 def missing_obj(original_lst, new_lst):\
\'a0\'a0\'a0\'a0for x in new_lst:\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0original_lst.remove(x)\
\'a0\'a0\'a0\'a0return original_lst
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\

\b portfolio
\b0 \
LOBO ***\
ILLUSTRATOR - Portfolio Masonry Home\
HUGE **\
werkstatt- main demo, lateral dark\
calafate\
koncept\
oshine- minimal portfolio, designer\
uncode - creative agency, metro\
notio}